[{"name": "app.py", "content": "import shiny\nfrom shiny import ui, render, reactive\nimport pandas as pd\nimport random\n\n# Fake Data Generation Function\ndef generate_fake_data():\n    characters = ['Wizard', 'Fighter', 'Rogue', 'Cleric', 'Barbarian']\n    stats = {\n        'Character': [random.choice(characters) for _ in range(100)],\n        'Strength': [random.randint(8, 18) for _ in range(100)],\n        'Dexterity': [random.randint(8, 18) for _ in range(100)],\n        'Constitution': [random.randint(8, 18) for _ in range(100)],\n        'Intelligence': [random.randint(8, 18) for _ in range(100)],\n        'Wisdom': [random.randint(8, 18) for _ in range(100)],\n        'Charisma': [random.randint(8, 18) for _ in range(100)],\n    }\n    return pd.DataFrame(stats)\n\n# Create a reactive calculation to simulate data filtering or transformation\n@reactive.Calc\ndef filtered_data():\n    df = generate_fake_data()\n    return df\n\n# Define UI with Shiny Express\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"strength_range\", \"Strength Range\", min=8, max=18, value=(8, 18)),\n            ui.input_slider(\"dexterity_range\", \"Dexterity Range\", min=8, max=18, value=(8, 18)),\n            ui.input_slider(\"constitution_range\", \"Constitution Range\", min=8, max=18, value=(8, 18)),\n        ),\n        ui.layout_columns(\n            ui.h2(\"Dungeons and Dragons Dashboard\"),\n            ui.row(\n                ui.card(\n                    ui.h3(\"Character Stats Summary\"),\n                    ui.output_ui(\"avg_strength\"),\n                    ui.output_ui(\"avg_dexterity\"),\n                    ui.output_ui(\"avg_constitution\"),\n                    ui.output_ui(\"avg_intelligence\"),\n                    ui.output_ui(\"avg_wisdom\"),\n                    ui.output_ui(\"avg_charisma\"),\n                ),\n                ui.card(\n                    ui.h3(\"Character Distribution\"),\n                    ui.output_plot(\"stats_plot\")\n                ),\n            ),\n            ui.row(\n                ui.card(\n                    ui.h3(\"Character Grid\"),\n                    ui.output_table(\"character_grid\"),\n                )\n            ),\n        )\n    )\n)\n\n# Define server function to handle the logic\ndef server(input, output, session):\n    # Filtered data based on sliders\n    @output\n    @render.ui\n    def avg_strength():\n        df = filtered_data()\n        avg = df[(df['Strength'] >= input.strength_range[0]) & (df['Strength'] <= input.strength_range[1])]['Strength'].mean()\n        return ui.div(f\"Avg Strength: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_dexterity():\n        df = filtered_data()\n        avg = df[(df['Dexterity'] >= input.dexterity_range[0]) & (df['Dexterity'] <= input.dexterity_range[1])]['Dexterity'].mean()\n        return ui.div(f\"Avg Dexterity: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_constitution():\n        df = filtered_data()\n        avg = df[(df['Constitution'] >= input.constitution_range[0]) & (df['Constitution'] <= input.constitution_range[1])]['Constitution'].mean()\n        return ui.div(f\"Avg Constitution: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_intelligence():\n        df = filtered_data()\n        avg = df['Intelligence'].mean()\n        return ui.div(f\"Avg Intelligence: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_wisdom():\n        df = filtered_data()\n        avg = df['Wisdom'].mean()\n        return ui.div(f\"Avg Wisdom: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_charisma():\n        df = filtered_data()\n        avg = df['Charisma'].mean()\n        return ui.div(f\"Avg Charisma: {avg:.2f}\", class_=\"value-box\")\n\n    # Generate a plot of character stats\n    @output\n    @render.plot\n    def stats_plot():\n        import matplotlib.pyplot as plt\n        df = filtered_data()\n        stats = ['Strength', 'Dexterity', 'Constitution', 'Intelligence', 'Wisdom', 'Charisma']\n        means = [df[stat].mean() for stat in stats]\n\n        plt.bar(stats, means, color='skyblue')\n        plt.xlabel('Stat')\n        plt.ylabel('Average Value')\n        plt.title('Average Character Stats')\n\n    # Display character data grid\n    @output\n    @render.table\n    def character_grid():\n        df = filtered_data()\n        return df[['Character', 'Strength', 'Dexterity', 'Constitution', 'Intelligence', 'Wisdom', 'Charisma']].head(10)\n\n# Run the app\nshiny.App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# cintel-06-custom", "type": "text"}, {"name": "requirements.txt", "content": "shiny\npandas\nplotly\nshinywidgets\nscipy\nshinyexpress\nshinylive", "type": "text"}]