[{"name": "app.py", "content": "import shiny\nfrom shiny import ui, render, reactive\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\n\n# Fake Data Generation Function (scriptable)\ndef generate_fake_data(characters=None, stat_ranges=None, num_characters=100):\n    # Default character classes if none are provided\n    if characters is None:\n        characters = ['Wizard', 'Fighter', 'Rogue', 'Cleric', 'Barbarian']\n    \n    # Default stat ranges if none are provided\n    if stat_ranges is None:\n        stat_ranges = {\n            'Strength': (8, 18),\n            'Dexterity': (8, 18),\n            'Constitution': (8, 18),\n            'Intelligence': (8, 18),\n            'Wisdom': (8, 18),\n            'Charisma': (8, 18),\n        }\n\n    stats = {\n        'Character': [random.choice(characters) for _ in range(num_characters)],\n        'Strength': [random.randint(stat_ranges['Strength'][0], stat_ranges['Strength'][1]) for _ in range(num_characters)],\n        'Dexterity': [random.randint(stat_ranges['Dexterity'][0], stat_ranges['Dexterity'][1]) for _ in range(num_characters)],\n        'Constitution': [random.randint(stat_ranges['Constitution'][0], stat_ranges['Constitution'][1]) for _ in range(num_characters)],\n        'Intelligence': [random.randint(stat_ranges['Intelligence'][0], stat_ranges['Intelligence'][1]) for _ in range(num_characters)],\n        'Wisdom': [random.randint(stat_ranges['Wisdom'][0], stat_ranges['Wisdom'][1]) for _ in range(num_characters)],\n        'Charisma': [random.randint(stat_ranges['Charisma'][0], stat_ranges['Charisma'][1]) for _ in range(num_characters)],\n    }\n    return pd.DataFrame(stats)\n\n# Define UI with Shiny Express\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"strength_range\", \"Strength Range\", min=8, max=18, value=(8, 18)),\n            ui.input_slider(\"dexterity_range\", \"Dexterity Range\", min=8, max=18, value=(8, 18)),\n            ui.input_slider(\"constitution_range\", \"Constitution Range\", min=8, max=18, value=(8, 18)),\n        ),\n        ui.layout_columns(\n            ui.h1(\"Dungeons and Dragons Dashboard\"),\n            ui.row(\n                ui.card(\n                    ui.h3(\"Character Stats Summary\"),\n                    ui.output_ui(\"avg_strength\"),\n                    ui.output_ui(\"avg_dexterity\"),\n                    ui.output_ui(\"avg_constitution\"),\n                    ui.output_ui(\"avg_intelligence\"),\n                    ui.output_ui(\"avg_wisdom\"),\n                    ui.output_ui(\"avg_charisma\"),\n                ),\n                ui.card(\n                    ui.h3(\"Character Distribution\"),\n                    ui.output_plot(\"stats_plot\")\n                ),\n            ),\n            ui.row(\n                ui.card(\n                    ui.h3(\"Character Grid\"),\n                    ui.output_table(\"character_grid\"),\n                )\n            ),\n        )\n    )\n)\n\n# Define server function to handle the logic\ndef server(input, output, session):\n    # Function to get filtered data based on slider values\n    @reactive.Calc\n    def filtered_data():\n        # Extracting the slider values using .get()\n        strength_range = input.strength_range.get()\n        dexterity_range = input.dexterity_range.get()\n        constitution_range = input.constitution_range.get()\n\n        stat_ranges = {\n            'Strength': strength_range,\n            'Dexterity': dexterity_range,\n            'Constitution': constitution_range,\n            'Intelligence': (8, 18),  # Default range for other stats\n            'Wisdom': (8, 18),\n            'Charisma': (8, 18),\n        }\n        \n        df = generate_fake_data(stat_ranges=stat_ranges)\n        df = df[\n            (df['Strength'] >= strength_range[0]) & (df['Strength'] <= strength_range[1]) &\n            (df['Dexterity'] >= dexterity_range[0]) & (df['Dexterity'] <= dexterity_range[1]) &\n            (df['Constitution'] >= constitution_range[0]) & (df['Constitution'] <= constitution_range[1])\n        ]\n        return df\n\n    # Stats summary\n    @output\n    @render.ui\n    def avg_strength():\n        df = filtered_data()\n        avg = df['Strength'].mean()\n        return ui.div(f\"Avg Strength: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_dexterity():\n        df = filtered_data()\n        avg = df['Dexterity'].mean()\n        return ui.div(f\"Avg Dexterity: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_constitution():\n        df = filtered_data()\n        avg = df['Constitution'].mean()\n        return ui.div(f\"Avg Constitution: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_intelligence():\n        df = filtered_data()\n        avg = df['Intelligence'].mean()\n        return ui.div(f\"Avg Intelligence: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_wisdom():\n        df = filtered_data()\n        avg = df['Wisdom'].mean()\n        return ui.div(f\"Avg Wisdom: {avg:.2f}\", class_=\"value-box\")\n\n    @output\n    @render.ui\n    def avg_charisma():\n        df = filtered_data()\n        avg = df['Charisma'].mean()\n        return ui.div(f\"Avg Charisma: {avg:.2f}\", class_=\"value-box\")\n\n    # Generate a plot of character stats\n    @output\n    @render.plot\n    def stats_plot():\n        df = filtered_data()\n        stats = ['Strength', 'Dexterity', 'Constitution', 'Intelligence', 'Wisdom', 'Charisma']\n        means = [df[stat].mean() for stat in stats]\n\n        plt.bar(stats, means, color='skyblue')\n        plt.xlabel('Stat')\n        plt.ylabel('Average Value')\n        plt.title('Average Character Stats')\n        return plt.gcf()\n\n    # Display character data grid\n    @output\n    @render.table\n    def character_grid():\n        df = filtered_data()\n        return df[['Character', 'Strength', 'Dexterity', 'Constitution', 'Intelligence', 'Wisdom', 'Charisma']].head(10)\n\n# Run the app\napp = shiny.App(app_ui, server)\napp.run()  # Explicitly start the app\n", "type": "text"}]